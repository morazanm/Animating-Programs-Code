#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 862 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 89
(6
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e sort-abstract) (read-ca"
) 0 0 4 3 261
(7
 #"se-sensitive #t) (teachpacks ((lib \"image.rkt\" \"teachpack\" \"2ht"
 #"dp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\"))) (htdp-setting"
 #"s #(#t constructor repeating-decimal #f #t none #f ((lib \"image.rkt"
 #"\" \"teachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2h"
 #"tdp\")) #f)))"
) 0 0 4 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 46 #";; (X --> Boolean) X (listof X) --> (listof X)"
0 0 27 29 1 #"\n"
0 0 18 3 72
(8
 #";; Purpose: To insert the given number in the given lox to create an"
 #" lox"
) 0 0 27 29 1 #"\n"
0 0 18 3 44 #";;          sorted using the given predicate"
0 0 27 29 1 #"\n"
0 0 18 3 79
(9
 #";; ASSUMPTION: The given lon is sorted the order defined by the give"
 #"n predicate"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"an-x"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"an-x"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 4 #"pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"an-x"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 4 #"an-x"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 3 #") ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"an-x"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 70
(10
 #";; sort-lon: (X (listof X) --> (listof X)) X (listof X) --> (listof "
 #"X)"
) 0 0 27 29 1 #"\n"
0 0 18 3 59
#";; Purpose: To sort the given lox using the given predicate"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"pred"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"pred"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 3 #") ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 4 #"pred"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lox"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 2 #"31"
0 0 27 3 1 #" "
0 0 23 3 2 #"87"
0 0 27 3 1 #" "
0 0 23 3 2 #"95"
0 0 27 3 1 #" "
0 0 23 3 3 #"102"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTED-LON2>="
0 0 27 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 1 #" "
0 0 23 3 2 #"20"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM2"
0 0 27 3 1 #" "
0 0 23 3 2 #"90"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9        1189 23           0 0           0 197 0 18 3 29
#";; insert: number lon --> lon"
0 0 27 29 1 #"\n"
0 0 18 3 72
(11
 #";; Purpose: To insert the given number in the given lon to create an"
 #" lon"
) 0 0 27 29 1 #"\n"
0 0 18 3 26 #";; in non-decreasing order"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";; ASSUMPTION: The given lon is sorted in non-decreasing order"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-num"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 3 #") ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #"<="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-num"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 32 #";; Sample expressions for insert"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"ELON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTEDLON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"UNSORTEDLON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                              ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM2"
0 0 27 29 1 #"\n"
0 0 27 3 39 #"                                      ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 45 #";; Tests using sample computations for insert"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 1 #" "
0 0 14 3 5 #"E-LON"
0 0 27 3 2 #") "
0 0 14 3 8 #"ELON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 14 3 13 #"SORTEDLON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 11 #"SORTED-LON2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 14 3 15 #"UNSORTEDLON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 39 #";; Tests using sample values for insert"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 23 3 3 #"101"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 2 #"-7"
0 0 27 3 1 #" "
0 0 23 3 2 #"-5"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"232"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 2 #"-7"
0 0 27 3 1 #" "
0 0 23 3 2 #"-5"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"101"
0 0 27 3 1 #" "
0 0 23 3 3 #"232"
0 0 27 3 2 #"))"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 28 #";; Sample instances of a lon"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"E-LON"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 2 #"17"
0 0 27 3 1 #" "
0 0 23 3 2 #"18"
0 0 27 3 1 #" "
0 0 23 3 2 #"29"
0 0 27 3 1 #" "
0 0 23 3 2 #"37"
0 0 27 3 1 #" "
0 0 23 3 2 #"41"
0 0 27 3 1 #" "
0 0 23 3 2 #"52"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"SORTED-LON>="
0 0 27 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 2 #"89"
0 0 27 3 1 #" "
0 0 23 3 2 #"21"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 2 #"77"
0 0 27 3 1 #" "
0 0 23 3 2 #"23"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";; sort-lon: lon --> lon"
0 0 27 29 1 #"\n"
0 0 18 3 57 #";; Purpose: To sort the given lon in non-decreasing order"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 3 #") ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #"<="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9         301 23           0 0           0 49 0 18 3 34
#";; Sample expressions for sort-lon"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"E-LON-VAL"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"SORTED-LON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"UNSORTED-LON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 4 #"))))"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";; Sample expressions for sort-lon"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"E-LON-VAL"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"SORTED-LON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #"<="
0 0 27 3 2 #"  "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"UNSORTED-LON-VAL"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #"<="
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 47 #";; Tests using sample computations for sort-lon"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 1 #" "
0 0 14 3 5 #"E-LON"
0 0 27 3 2 #") "
0 0 14 3 9 #"E-LON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 2 #") "
0 0 14 3 14 #"SORTED-LON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 2 #") "
0 0 14 3 16 #"UNSORTED-LON-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 41 #";; Tests using sample values for sort-lon"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-lon"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 2 #"63"
0 0 27 3 1 #" "
0 0 23 3 2 #"12"
0 0 27 3 1 #" "
0 0 23 3 2 #"76"
0 0 27 3 1 #" "
0 0 23 3 2 #"99"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 2 #"12"
0 0 27 3 1 #" "
0 0 23 3 2 #"63"
0 0 27 3 1 #" "
0 0 23 3 2 #"76"
0 0 27 3 1 #" "
0 0 23 3 2 #"99"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9        1189 23           0 0           0 197 0 18 3 21
#";; number lon --> lon"
0 0 27 29 1 #"\n"
0 0 18 3 72 11 0 0 27 29 1 #"\n"
0 0 18 3 25 #";; in nonincreasing order"
0 0 27 29 1 #"\n"
0 0 18 3 61
#";; ASSUMPTION: The given lon is sorted in nonincreasing order"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-num"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 3 #") ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #">="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-num"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";; Sample expressions for insert>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"ELON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"SORTEDLON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 1 #" "
0 0 14 3 12 #"SORTED-LON>="
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"UNSORTEDLON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTED-LON2>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 33 #"                                ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM2"
0 0 27 29 1 #"\n"
0 0 27 3 41 #"                                        ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTED-LON2>="
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 47 #";; Tests using sample computations for insert>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM1"
0 0 27 3 1 #" "
0 0 14 3 5 #"E-LON"
0 0 27 3 2 #") "
0 0 14 3 10 #"ELON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 1 #" "
0 0 14 3 12 #"SORTED-LON>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 14 3 15 #"SORTEDLON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTED-LON2>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 11 #"INSERT-NUM2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 13 #"SORTED-LON2>="
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 14 3 17 #"UNSORTEDLON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 39 #";; Tests using sample values for insert"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 1 #" "
0 0 23 3 3 #"101"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 3 #"232"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 2 #"-5"
0 0 27 3 1 #" "
0 0 23 3 2 #"-7"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 3 #"232"
0 0 27 3 1 #" "
0 0 23 3 3 #"101"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 2 #"-5"
0 0 27 3 1 #" "
0 0 23 3 2 #"-7"
0 0 27 3 2 #"))"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";; lon --> lon"
0 0 27 29 1 #"\n"
0 0 18 3 56 #";; Purpose: To sort the given lon in nonincreasing order"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 3 #") ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #">="
0 0 27 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9         301 23           0 0           0 49 0 18 3 36
#";; Sample expressions for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"E-LON-VAL>="
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"SORTED-LON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 36 #"                                   ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"UNSORTED-LON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 8 #"insert>="
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 38 #"                                     ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 4 #"))))"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 36 #";; Sample expressions for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"E-LON-VAL>="
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"SORTED-LON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #">="
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"UNSORTED-LON-VAL>="
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 2 #">="
0 0 27 3 2 #"  "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 49 #";; Tests using sample computations for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 1 #" "
0 0 14 3 5 #"E-LON"
0 0 27 3 2 #") "
0 0 14 3 11 #"E-LON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 1 #" "
0 0 14 3 10 #"SORTED-LON"
0 0 27 3 2 #") "
0 0 14 3 16 #"SORTED-LON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 1 #" "
0 0 14 3 12 #"UNSORTED-LON"
0 0 27 3 2 #") "
0 0 14 3 18 #"UNSORTED-LON-VAL>="
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #";; Tests using sample values for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"sort-lon>="
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 2 #"12"
0 0 27 3 1 #" "
0 0 23 3 2 #"63"
0 0 27 3 1 #" "
0 0 23 3 2 #"76"
0 0 27 3 1 #" "
0 0 23 3 2 #"99"
0 0 27 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 2 #"99"
0 0 27 3 1 #" "
0 0 23 3 2 #"76"
0 0 27 3 1 #" "
0 0 23 3 2 #"63"
0 0 27 3 1 #" "
0 0 23 3 2 #"12"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"#| A store item (item) is a structure,"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"(make-item string number number),"
0 0 18 29 1 #"\n"
0 0 18 3 60
(12
 #"that has the item\342\200\231s name, price, and quantity in stock. |"
 #"#"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 27 3 1 #" "
0 0 14 3 4 #"item"
0 0 27 3 2 #" ("
0 0 14 3 4 #"name"
0 0 27 3 1 #" "
0 0 14 3 5 #"price"
0 0 27 3 1 #" "
0 0 14 3 8 #"quantity"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"car\""
0 0 27 3 1 #" "
0 0 23 3 5 #"24000"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"BIKE"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"bike\""
0 0 27 3 1 #" "
0 0 23 3 4 #"2000"
0 0 27 3 1 #" "
0 0 23 3 2 #"12"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"WINE"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"wine\""
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 1 #" "
0 0 23 3 2 #"22"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"MAGNET"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"magnet\""
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"MCYCLE"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 12 #"\"motorcycle\""
0 0 27 3 1 #" "
0 0 23 3 5 #"11500"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"ELOI"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"WINE"
0 0 27 3 1 #" "
0 0 14 3 4 #"BIKE"
0 0 27 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"ALOI"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 27 3 1 #" "
0 0 14 3 4 #"BIKE"
0 0 27 3 1 #" "
0 0 14 3 4 #"WINE"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";; item item --> Boolean"
0 0 27 29 1 #"\n"
0 0 18 3 96
(13
 #";; Purpose: Determine if the the first given item's price is <= to t"
 #"he second given item's price"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 5 #"item1"
0 0 27 3 1 #" "
0 0 14 3 5 #"item2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"<="
0 0 27 3 2 #" ("
0 0 14 3 10 #"item-price"
0 0 27 3 1 #" "
0 0 14 3 5 #"item1"
0 0 27 3 3 #") ("
0 0 14 3 10 #"item-price"
0 0 27 3 1 #" "
0 0 14 3 5 #"item2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9        1057 23           0 0           0 175 0 18 3 19
#";; item loi --> loi"
0 0 27 29 1 #"\n"
0 0 18 3 70
(14
 #";; Purpose: To insert the given item in the given loi to create an l"
 #"oi"
) 0 0 27 29 1 #"\n"
0 0 18 3 34 #";; in nondecreasing order by price"
0 0 27 29 1 #"\n"
0 0 18 3 70
(15
 #";; ASSUMPTION: The given loy is sorted in nondecreasing order by pri"
 #"ce"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 1 #" "
0 0 14 3 7 #"an-item"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-loi"
0 0 27 3 3 #") ("
0 0 14 3 11 #"insert-pred"
0 0 27 3 1 #" "
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 7 #"an-item"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-loi"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 36 #";; Sample expressions for insert-loi"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"ELOI-VAL"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"WINE"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"SLOI-VAL"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 6 #"MAGNET"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"SLOI-VAL2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 3 #") ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 1 #" "
0 0 14 3 6 #"MCYCLE"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 49 #";; Tests using sample computations for insert-loi"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 1 #" "
0 0 14 3 4 #"WINE"
0 0 27 3 1 #" "
0 0 14 3 4 #"ELOI"
0 0 27 3 2 #") "
0 0 14 3 8 #"ELOI-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 1 #" "
0 0 14 3 6 #"MAGNET"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #") "
0 0 14 3 8 #"SLOI-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 1 #" "
0 0 14 3 6 #"MCYCLE"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #") "
0 0 14 3 9 #"SLOI-VAL2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #";; Tests using sample values for insert-loi"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"pen\""
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"pencil\""
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"gum\""
0 0 27 3 1 #" "
0 0 23 3 4 #"1.50"
0 0 27 3 1 #" "
0 0 23 3 3 #"200"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"pencil\""
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"gum\""
0 0 27 3 1 #" "
0 0 23 3 4 #"1.50"
0 0 27 3 1 #" "
0 0 23 3 3 #"200"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"pen\""
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 14 #";; loi --> loi"
0 0 27 29 1 #"\n"
0 0 18 3 65
#";; Purpose: To sort the given loi in nonincreasing order by price"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-loi"
0 0 27 3 3 #") ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 5 #"a-loi"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 9         277 23           0 0           0 45 0 18 3 34
#";; Sample expressions for sort-loi"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"ELOI-VAL2"
0 0 27 3 2 #"  "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"SLOI-VAL3"
0 0 27 3 2 #" ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 3 #") ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"ALOI-VAL"
0 0 27 3 3 #"  ("
0 0 14 3 10 #"insert-loi"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"ALOI"
0 0 27 3 3 #") ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"ALOI"
0 0 27 3 4 #"))))"
0           0 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";; Sample expressions for sort-loi"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"ELOI-VAL2"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 4 #"ELOI"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"SLOI-VAL3"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"ALOI-VAL"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"sort-pred"
0 0 27 3 1 #" "
0 0 14 3 8 #"leq-item"
0 0 27 3 1 #" "
0 0 14 3 4 #"ALOI"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 49 #";; Tests using sample computations for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 1 #" "
0 0 14 3 4 #"ELOI"
0 0 27 3 2 #") "
0 0 14 3 9 #"ELOI-VAL2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 1 #" "
0 0 14 3 4 #"SLOI"
0 0 27 3 2 #") "
0 0 14 3 9 #"SLOI-VAL3"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 1 #" "
0 0 14 3 4 #"ALOI"
0 0 27 3 2 #") "
0 0 14 3 8 #"ALOI-VAL"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #";; Tests using sample values for sort-lon>="
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sort-loi"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"pencil\""
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"pen\""
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"gum\""
0 0 27 3 1 #" "
0 0 23 3 4 #"1.50"
0 0 27 3 1 #" "
0 0 23 3 3 #"200"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"pencil\""
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 1 #" "
0 0 23 3 2 #"50"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"gum\""
0 0 27 3 1 #" "
0 0 23 3 4 #"1.50"
0 0 27 3 1 #" "
0 0 23 3 3 #"200"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-item"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"pen\""
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 23 3 3 #"100"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0           0
